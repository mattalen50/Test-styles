<?php

/**
 * @file
 * Demonstrates use of the Cron API in Drupal - hook_cron().
 */
/**
 * umn_livewhale_event_importer using Cron API, including hook_cron()
 */
use Drupal\umn_livewhale_event_importer\Form\JsonImportForm;
use Drupal\migrate_tools\MigrateExecutable;
use Drupal\migrate\MigrateMessage;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_cron().
 *
 * We implement hook_cron() to do "background" processing. It gets called every
 * time the Drupal cron runs. We then decide what has to happen in response.
 *
 * We log a message after the time given in the state value
 * 'umn_livewhale_event_importer.next_execution'. Then we update that variable to a time in the
 * future.
 */
function umn_livewhale_event_importer_cron() {

  // Access our configuration.
  $cron_config = Drupal::config('umn_livewhale_event_importer.settings');
  // Default to 28 day interval.
  $interval = $cron_config->get('interval');

  // We usually don't want to act every time cron runs (which could be every
  // hour) so keep a time for the next run in the site state.
  $next_execution = Drupal::state()->get('umn_livewhale_event_importer.next_execution', 0);
  if (Drupal::time()->getRequestTime() >= $next_execution) {
    // Add messages
    Drupal::logger('umn_livewhale_event_importer')->notice('umn_livewhale_event_importer ran');
    // Show message if forced cron run
    if (Drupal::state()->get('umn_livewhale_event_importer_show_status_message')) {
      Drupal::messenger()
        ->addMessage(t('umn_livewhale_event_importer executed at %time', ['%time' => date('c')]));
      Drupal::state()->set('umn_livewhale_event_importer_show_status_message', FALSE);
    }

    $migration_id = "umn_custom_events_json_importer";
    $migration = Drupal::service('plugin.manager.migration')
      ->createInstance($migration_id);
    $migration->set('syncSource', TRUE);
    $migration->getIdMap()->prepareUpdate();
    $executable = new MigrateExecutable($migration, new MigrateMessage());
    $executable->import();

    Drupal::state()->set('umn_livewhale_event_importer_is_running', TRUE);
    Drupal::state()
      ->set('umn_livewhale_event_importer.next_execution', Drupal::time()->getRequestTime() + $interval);

  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for views-view-unformatted templates. Template not working. Using hook below for now.
 */
function umn_livewhale_event_importer_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  // Add a suggestion for a specific view.
  if ($variables['view']->id() == 'events_view') {
    $suggestions[] = 'views_view_unformatted__events_view_custom';
  }
}

/**
 * Implements hook_views_pre_render().
 */
function umn_livewhale_event_importer_views_pre_render(ViewExecutable $view) {
  if (isset($view) && ($view->storage->id() == 'events_view')) {
    $view->element['#attached']['library'][] = 'umn_livewhale_event_importer/event_css';
  }
}
